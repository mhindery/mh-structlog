[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "mh_structlog"
authors = [
    { name = "Mathieu Hinderyckx", email = "mathieu.hinderyckx@gmail.com" },
]
description = "Some Structlog configuration and wrappers to easily use structlog."
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "orjson>=3.10.12",
    "structlog>=24.4.0",
    "structlog-sentry>=2.2.1",
]

[dependency-groups]
dev = ["ipdb>=0.13.13", "ipython>=8.18.1", "pre-commit>=4.0.1", "ruff>=0.8.1"]
tests = [
    "coverage>=7.5.3",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-django>=4.8.0",
    "pytest-env>=1.1.5",
    "pytest-randomly>=3.15.0",
    "pytest-sugar>=1.0.0",
]
pages = [
    "black>=24.10.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocstrings[python]>=0.26.2",
    "pymdown-extensions>=10.12",
    "mkdocs-include-dir-to-nav>=1.2.0",
    "mkdocs-git-authors-plugin>=0.9.2",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-roamlinks-plugin>=0.3.2",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.44",
]

[tool.uv]
package = true
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
    "sys_platform == 'win32'",
]

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
indent-width = 4
preview = false
required-version = ">=0.8.1"
target-version = "py39"
unsafe-fixes = true

# Overwritten in CI/CD
output-format = "full"
fix = true

[tool.ruff.lint]
preview = false
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Refactor
    "R",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # refurb
    # "FURB",  # disabled as currently only in preview
    # Ruff-specific rules
    "RUF",
]

ignore = ["D100", "D104", "E501", "TRY003", "ANN001"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
preview = false
line-ending = "lf"
indent-style = "space"
quote-style = "preserve"
docstring-code-format = true
docstring-code-line-length = "dynamic"
exclude = ["*.pyi"]

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
avoid-escape = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true     # allows for gradual typing
suppress-none-returning = false

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true
force-wrap-aliases = false
detect-same-package = true
split-on-trailing-comma = false
known-local-folder = ["src"]
lines-after-imports = 2


# ==== pytest ====
[tool.pytest_env]
ENVIRONMENT = "test"

[tool.pytest]
color = "yes"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-s --durations=5 -v --import-mode=importlib --cov --cov-report=term --cov-report=html --cov-report=xml --junit-xml=junit.xml"
python_files = ["tests/tests.py", "tests/test_*.py"]

junit_family = 'xunit2'
junit_suite_name = "test_suite"
junit_logging = 'all'
junit_log_passing_tests = true
junit_duration_report = "call"

filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ==== Coverage ====
[tool.coverage.run]
omit = [
    "*/migrations/*",
    "*/media/*",
    ".venv/*",
    "terraform/*",
    "htmlcov/*",
    "staticfiles/*",
    "requirements/*",
    "manage.py",
    "asgi.py",
    "wsgi.py",
    "*/.vscode/*",
]
plugins = []
branch = true

[tool.coverage.report]
format = "text"
skip_empty = true
precision = 2

[tool.coverage.term]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
